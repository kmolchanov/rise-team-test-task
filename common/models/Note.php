<?php

namespace common\models;

use MongoDB\BSON\UTCDateTime;
use Yii;
use mongosoft\mongodb\MongoDateBehavior;
use MongoDB\BSON\ObjectId;

/**
 * This is the model class for collection "note".
 *
 * @property \MongoDB\BSON\ObjectID|string $_id
 * @property mixed $name
 * @property mixed $description
 * @property mixed $_authorId
 * @property mixed $createdAt
 * @property mixed $updatedAt
 */
class Note extends \yii\mongodb\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function collectionName()
    {
        return ['rise-team-test-task', 'note'];
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => MongoDateBehavior::className(),
                'createdAtAttribute' => 'createdAt',
                'updatedAtAttribute' => 'updatedAt',
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributes()
    {
        return [
            '_id',
            'name',
            'description',
            '_authorId',
            'createdAt',
            'updatedAt',
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'description', '_authorId'], 'required'],
            ['name', 'string', 'max' => 255],
            [['_authorId', 'description'], 'string'],
            [['_authorId'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['_authorId' => '_id']],
            [['createdAt', 'updatedAt'], 'safe']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            '_id' => 'ID',
            'name' => 'Name',
            'description' => 'Description',
            '_authorId' => 'Author ID',
            'createdAt' => 'Created At',
            'updatedAt' => 'Updated At',
        ];
    }

    public function beforeSave($insert)
    {
        $this->_authorId = new ObjectId($this->_authorId);

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @return \yii\db\ActiveQueryInterface
     */
    public function getAuthor()
    {
        return $this->hasOne(User::className(), ['_id' => '_authorId']);
    }

    /**
     * @return array|false
     */
    public function fields()
    {
        return [
            '_id',
            'name',
            'description',
            'author',
            'createdAt',
        ];
    }
}
